plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'anbrain.qa.rococo'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven { url = uri("https://repo.spring.io/milestone") }
    maven { url = uri("https://repo.spring.io/snapshot") }
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.grpc:spring-grpc-dependencies:0.4.0'
    }
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    // gRPC
    implementation 'io.grpc:grpc-netty'
    implementation 'io.grpc:grpc-protobuf'
    implementation 'io.grpc:grpc-stub'
    implementation 'io.grpc:grpc-core'
    // Spring Boot gRPC интеграция
    implementation "net.devh:grpc-client-spring-boot-starter:${project.ext.springGrpcVersion}"
    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    //web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //OpenApi
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${project.ext.openapiVersion}"
    //DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Lombok
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    //UnitTests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "com.h2database:h2:${project.ext.h2Version}"
    //WireMock
    testImplementation("org.wiremock:wiremock-jetty12:${project.ext.wiremockVersion}") {
        exclude group: 'org.apache.httpcomponents.client5', module: 'httpclient5'
    }
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.5'
    testImplementation 'org.apache.httpcomponents.core5:httpcore5:5.3.4'
    testImplementation 'org.apache.httpcomponents.core5:httpcore5-h2:5.3.4'
    testImplementation 'org.wiremock:wiremock-grpc-extension-jetty12:0.10.0'

    testImplementation 'com.google.protobuf:protobuf-java-util:3.25.1'
    protobuf files("../src/main/proto")
    protobuf files("../src/test/proto")
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${dependencyManagement.importedProperties['protobuf-java.version']}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${dependencyManagement.importedProperties['grpc.version']}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.path = "${projectDir}/src/test/resources/wiremock/grpc/rococo-gateway.dsc"
            task.descriptorSetOptions.includeSourceInfo = true
            task.descriptorSetOptions.includeImports = true
            task.dependsOn 'prepareWiremockDirs'

            task.plugins {
                grpc {
                    option 'jakarta_omit'
                    option '@generated=omit'
                }
            }
        }
    }

}

// Указываем, где искать сгенерированные классы
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
    test {
        resources {
            srcDirs = ["$projectDir/src/test/resources"]
            exclude '**/*.dsc'
        }
    }
}

tasks.register('prepareWiremockDirs') {
    doLast {
        mkdir "${projectDir}/src/test/resources/wiremock/grpc"
    }
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}